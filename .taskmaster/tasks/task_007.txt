# Task ID: 7
# Title: Create MCP Server with Tool Registration
# Status: done
# Dependencies: 4, 5, 6
# Priority: high
# Description: Implement the MCP server that registers all Lodgify tools with proper Zod validation schemas and connects them to the HTTP client
# Details:
Create src/server.ts:
1. Initialize MCP Server from @modelcontextprotocol/sdk
2. Load environment variables with dotenv
3. Create Zod schemas for each tool's input
4. Register all 15 tools with descriptions
5. Implement tool handlers that call LodgifyClient methods
6. Add health resource at lodgify://health
7. Setup stdio transport

Structure:
```typescript
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { z } from 'zod';
import { LodgifyClient } from './lodgify.js';

const apiKey = process.env.LODGIFY_API_KEY;
if (!apiKey) throw new Error('LODGIFY_API_KEY required');

const client = new LodgifyClient(apiKey);
const server = new Server({
  name: 'lodgify-mcp',
  version: '0.1.0'
});

// Tool schemas
const ListPropertiesSchema = z.object({
  params: z.record(z.any()).optional()
});

const GetPropertySchema = z.object({
  id: z.string()
});

// Register tools
server.setRequestHandler('tools/list', async () => ({
  tools: [
    {
      name: 'lodgify.list_properties',
      description: 'List all properties (GET /v2/properties)',
      inputSchema: ListPropertiesSchema
    },
    // ... all other tools
  ]
}));

// Handle tool calls
server.setRequestHandler('tools/call', async (request) => {
  const { name, arguments: args } = request.params;
  
  switch(name) {
    case 'lodgify.list_properties': {
      const input = ListPropertiesSchema.parse(args);
      const result = await client.listProperties(input.params);
      return { content: [{ type: 'text', text: JSON.stringify(result) }] };
    }
    // ... handle all tools
  }
});

// Start server
const transport = new StdioServerTransport();
await server.connect(transport);
```

# Test Strategy:
Tests: 1) Server starts with valid API key, 2) Fails fast without API key, 3) All tools are registered correctly, 4) Zod validation rejects invalid inputs, 5) Tool handlers return proper MCP response format, 6) Health resource returns expected JSON

# Subtasks:
## 1. Initialize MCP Server and Environment [done]
### Dependencies: None
### Description: Set up the MCP Server instance, load environment variables, and validate the API key requirement
### Details:
Import necessary modules from @modelcontextprotocol/sdk, create server instance with name 'lodgify-mcp' and version '0.1.0', load LODGIFY_API_KEY from environment variables using process.env, throw error if API key is missing, instantiate LodgifyClient with the API key

## 2. Create Zod Validation Schemas [done]
### Dependencies: 7.1
### Description: Define Zod schemas for all 15 Lodgify tool inputs with proper type validation
### Details:
Create schemas for: ListPropertiesSchema, GetPropertySchema, ListPropertyRoomsSchema, ListDeletedPropertiesSchema, DailyRatesSchema, RateSettingsSchema, ListBookingsSchema, GetBookingSchema, PaymentLinkSchemas (get/create), UpdateKeyCodesSchema, AvailabilitySchemas (room/property), GetQuoteSchema, GetThreadSchema. Each schema should validate required parameters (IDs, date ranges, etc.) and optional query parameters

## 3. Register Tools with MCP Server [done]
### Dependencies: 7.2
### Description: Implement the tools/list request handler to register all 15 Lodgify tools with proper names, descriptions, and input schemas
### Details:
Set request handler for 'tools/list', return array of tool definitions including: lodgify.list_properties, lodgify.get_property, lodgify.list_property_rooms, lodgify.list_deleted_properties, lodgify.daily_rates, lodgify.rate_settings, lodgify.list_bookings, lodgify.get_booking, lodgify.get_booking_payment_link, lodgify.create_booking_payment_link, lodgify.update_key_codes, lodgify.availability_room, lodgify.availability_property, lodgify.get_quote, lodgify.get_thread. Each tool must have name, description referencing the API endpoint, and inputSchema reference

## 4. Implement Tool Call Handler [done]
### Dependencies: 7.3
### Description: Create the tools/call request handler with a switch statement to route and execute all 15 tool invocations
### Details:
Implement switch statement handling all tool names, parse arguments with corresponding Zod schema, call appropriate LodgifyClient method, format responses as MCP content with type 'text' and stringified JSON, handle errors with try-catch blocks returning error content, ensure proper async/await for all client calls

## 5. Add Health Resource Handler [done]
### Dependencies: 7.4
### Description: Implement the resources/list and resources/read handlers for the lodgify://health endpoint
### Details:
Register resources/list handler returning health resource with uri 'lodgify://health', name 'Health Check', and description. Implement resources/read handler that checks for lodgify://health URI, returns health status JSON including server version, API key presence (masked), current timestamp, and connection status

## 6. Setup Stdio Transport and Start Server [done]
### Dependencies: 7.5
### Description: Configure stdio transport for MCP communication and connect the server
### Details:
Import StdioServerTransport from SDK, create transport instance, await server.connect(transport), add error handling for connection failures, log server startup success, handle graceful shutdown on SIGINT/SIGTERM signals

