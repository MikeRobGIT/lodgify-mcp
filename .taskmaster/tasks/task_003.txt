# Task ID: 3
# Title: Add Query Parameter Flattening Support
# Status: done
# Dependencies: 2
# Priority: high
# Description: Implement bracket notation query parameter flattening to support complex nested parameters like roomTypes[0].Id and guest_breakdown[adults]
# Details:
Extend lodgify.ts with query parameter handling:
1. Create flattenParams function to handle bracket notation:
   - Input: { 'roomTypes[0].Id': 123, 'guest_breakdown[adults]': 2 }
   - Output: URLSearchParams with proper encoding
2. Support nested objects and arrays:
   - Arrays: param[0], param[1]
   - Objects: param[key]
   - Nested: param[0].subkey
3. Integrate into request method for GET requests
4. Handle special characters and encoding

Pseudo-code:
```typescript
private flattenParams(params: Record<string, any>): URLSearchParams {
  const searchParams = new URLSearchParams();
  
  for (const [key, value] of Object.entries(params)) {
    if (value !== undefined && value !== null) {
      // Handle bracket notation directly
      if (key.includes('[') || key.includes('.')) {
        searchParams.append(key, String(value));
      } else if (Array.isArray(value)) {
        value.forEach((item, index) => {
          searchParams.append(`${key}[${index}]`, String(item));
        });
      } else if (typeof value === 'object') {
        Object.entries(value).forEach(([subKey, subValue]) => {
          searchParams.append(`${key}[${subKey}]`, String(subValue));
        });
      } else {
        searchParams.append(key, String(value));
      }
    }
  }
  
  return searchParams;
}
```

# Test Strategy:
Unit tests covering: 1) Simple key-value pairs, 2) Array notation (param[0]), 3) Object notation (param[key]), 4) Nested notation (param[0].subkey), 5) Mixed complex parameters, 6) URL encoding of special characters

# Subtasks:
## 1. Implement Core flattenParams Function [done]
### Dependencies: None
### Description: Create the flattenParams method in lodgify.ts that handles bracket notation and basic nested structures
### Details:
Implement the private flattenParams function that processes parameters with bracket notation (e.g., 'roomTypes[0].Id'), arrays, and nested objects. The function should handle direct bracket notation keys, convert arrays to indexed bracket notation (param[0], param[1]), and transform nested objects to bracket notation (param[key]). Ensure proper string conversion for all values and handle undefined/null values gracefully.

## 2. Add Complex Nesting and Encoding Support [done]
### Dependencies: 3.1
### Description: Extend flattenParams to handle complex nested structures and special character encoding
### Details:
Enhance the flattenParams function to support deeply nested structures like 'param[0].subkey.deepkey' and mixed notation patterns. Implement proper URL encoding for special characters in both keys and values. Handle edge cases such as empty arrays, empty objects, and keys that already contain encoded characters. Ensure the URLSearchParams output is properly formatted for API consumption.

## 3. Integrate Flattening into Request Method and Add Tests [done]
### Dependencies: 3.2
### Description: Wire up flattenParams in the request method for GET requests and create comprehensive unit tests
### Details:
Modify the request method in lodgify.ts to use flattenParams for GET requests when query parameters are provided. Create unit tests covering: simple key-value pairs, array notation (param[0]), object notation (param[key]), nested notation (param[0].subkey), mixed complex parameters, URL encoding of special characters, null/undefined handling, and empty collections. Ensure the integration preserves existing functionality while adding the new flattening capability.

