# Task ID: 6
# Title: Implement Availability, Rates, and Quote Tools
# Status: done
# Dependencies: 3
# Priority: medium
# Description: Create MCP tools for availability checking, rate retrieval, and quote generation with complex parameter support
# Details:
Add to lodgify.ts:
1. getAvailabilityRoom(propertyId: string, roomTypeId: string, params?: Record<string, any>):
   - GET /v2/availability/{propertyId}/{roomTypeId}
2. getAvailabilityProperty(propertyId: string, params?: Record<string, any>):
   - GET /v2/availability/{propertyId}
3. getDailyRates(params: Record<string, any>):
   - GET /v2/rates/calendar
   - Required params: propertyId, from, to
4. getRateSettings(params: Record<string, any>):
   - GET /v2/rates/settings
5. getQuote(propertyId: string, params: Record<string, any>):
   - GET /v2/quote/{propertyId}
   - Complex params: roomTypes[0].Id, guest_breakdown[adults], addOns[0].Id

Quote implementation with bracket notation:
```typescript
public async getQuote(propertyId: string, params: Record<string, any>) {
  if (!propertyId) throw new Error('Property ID is required');
  if (!params.from || !params.to) {
    throw new Error('Date range (from, to) is required for quotes');
  }
  
  const queryString = '?' + this.flattenParams(params).toString();
  return this.request('GET', `/v2/quote/${encodeURIComponent(propertyId)}${queryString}`);
}
```

# Test Strategy:
Tests: 1) Availability check with date range, 2) Daily rates with required params, 3) Quote with complex nested parameters (roomTypes, guest_breakdown, addOns), 4) Validate required parameters, 5) Verify bracket notation encoding

# Subtasks:
## 1. Implement Availability Endpoints [done]
### Dependencies: None
### Description: Create getAvailabilityRoom and getAvailabilityProperty methods in lodgify.ts with proper date validation and path parameter handling
### Details:
Implement two methods:
1. getAvailabilityRoom(propertyId: string, roomTypeId: string, params?: Record<string, any>) - GET /v2/availability/{propertyId}/{roomTypeId}
2. getAvailabilityProperty(propertyId: string, params?: Record<string, any>) - GET /v2/availability/{propertyId}
Both should validate date parameters if provided and properly encode path parameters using encodeURIComponent

## 2. Implement Rate Management Endpoints [done]
### Dependencies: None
### Description: Create getDailyRates and getRateSettings methods with required parameter validation for rate calendar and settings retrieval
### Details:
Implement two methods:
1. getDailyRates(params: Record<string, any>) - GET /v2/rates/calendar with validation for required params: propertyId, from, to
2. getRateSettings(params: Record<string, any>) - GET /v2/rates/settings
Throw descriptive errors when required parameters are missing for getDailyRates

## 3. Implement Complex Quote Endpoint [done]
### Dependencies: None
### Description: Create getQuote method with support for nested parameters using bracket notation and comprehensive validation
### Details:
Implement getQuote(propertyId: string, params: Record<string, any>) - GET /v2/quote/{propertyId}
Validate required propertyId and date range (from, to)
Support complex nested parameters:
- roomTypes[0].Id, roomTypes[1].Id for multiple room types
- guest_breakdown[adults], guest_breakdown[children] for guest details
- addOns[0].Id, addOns[1].Id for additional services
Use flattenParams method to properly encode bracket notation

## 4. Register MCP Tools in Server [done]
### Dependencies: 6.1, 6.2, 6.3
### Description: Add all five new tools to server.ts with proper Zod schemas and map them to the corresponding lodgify client methods
### Details:
Register in server.ts:
1. lodgify.availability_room - with propertyId, roomTypeId, and optional date params
2. lodgify.availability_property - with propertyId and optional date params
3. lodgify.daily_rates - with required propertyId, from, to params
4. lodgify.rate_settings - with optional filter params
5. lodgify.get_quote - with propertyId and complex nested params schema
Define comprehensive Zod schemas for input validation, especially for the quote tool's nested structure

## 5. Create Integration Tests [done]
### Dependencies: 6.4
### Description: Write comprehensive tests for all availability, rates, and quote endpoints focusing on parameter validation and bracket notation handling
### Details:
Create test cases:
1. Availability endpoints with valid date ranges and property/room IDs
2. Daily rates with missing required parameters (should throw errors)
3. Quote generation with complex nested parameters (roomTypes[0].Id=123&guest_breakdown[adults]=2)
4. Verify bracket notation is properly encoded in query strings
5. Test error handling for invalid property IDs and date formats
6. Mock API responses to validate response parsing
Ensure â‰¥90% code coverage for new methods

