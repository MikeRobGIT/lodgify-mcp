# Task ID: 14
# Title: Refactor Lodgify MCP Server to Use High-Level McpServer and Adopt Latest SDK Best Practices
# Status: pending
# Dependencies: 7, 13
# Priority: medium
# Description: Migrate the Lodgify MCP server from the low-level Server class to the high-level McpServer class, update tool registration with enhanced metadata, declare explicit server capabilities, implement robust JSON-RPC error handling, and add optional features such as notification debouncing and dynamic tool management.
# Details:
1. Refactor src/server.ts to instantiate and configure the MCP server using the high-level McpServer class from @modelcontextprotocol/sdk, replacing any usage of the lower-level Server class. Ensure all server initialization, transport setup, and tool/resource registration are migrated to the new API.

2. Update tool registration to include comprehensive metadata for each tool: set clear titles, display names, descriptions, and input schema annotations. Follow SDK conventions for tool annotations to improve LLM and UI integration. Where appropriate, use longDescription, input field descriptions, and flags such as dangerous or requiresConfirmation for destructive actions[5].

3. Explicitly declare server capabilities (e.g., supported transports, notification support, dynamic tool registration) using the McpServer API. Ensure the server advertises its features in the MCP handshake and capability discovery mechanisms.

4. Enhance error handling throughout the server to conform to standard JSON-RPC error patterns: return structured error objects with code, message, and optional data fields. Implement error mapping for common Lodgify API errors and validation failures, and ensure all tool handlers propagate errors in the correct format.

5. Add optional advanced features:
   - Notification debouncing: Implement logic to coalesce or throttle repeated notifications to clients, reducing noise and improving UX.
   - Dynamic tool management: Enable runtime registration and deregistration of tools, allowing the server to adapt its capabilities without restart (if supported by the SDK).

6. Review and update logging practices to use a file-based logger (e.g., pino) for STDIO transports, ensuring logs do not interfere with protocol communication[1].

7. Ensure all changes are compatible with existing tool handlers and the Lodgify HTTP client, and update documentation/comments to reflect new patterns and capabilities.

Consider security best practices (e.g., environment variable management, authentication) and ensure the server remains production-ready[3][5].

# Test Strategy:
1. Automated and manual tests to verify the server starts and operates correctly using the McpServer class, with all tools and resources registered as before.
2. Confirm that each tool exposes enhanced metadata (title, displayName, descriptions) and that these are discoverable via the MCP client.
3. Validate that server capabilities are correctly advertised and that clients can query and interpret them.
4. Simulate error conditions (e.g., Lodgify API failures, invalid input) and verify that errors are returned in standard JSON-RPC format with appropriate codes and messages.
5. Test notification debouncing by triggering rapid-fire events and confirming that clients receive coalesced or throttled notifications.
6. Exercise dynamic tool management (if implemented) by registering and deregistering tools at runtime and verifying client awareness.
7. Review server logs to ensure all operational events are recorded to file without interfering with STDIO transport.
8. Run the full integration and smoke test suite to ensure no regressions in tool functionality or server stability.

# Subtasks:
## 1. Migrate Server Initialization to High-Level McpServer [pending]
### Dependencies: None
### Description: Refactor src/server.ts to instantiate and configure the Lodgify MCP server using the high-level McpServer class from @modelcontextprotocol/sdk, replacing all usage of the lower-level Server class. Ensure all server initialization, transport setup, and tool/resource registration are migrated to the new API.
### Details:
Update all server setup logic to use McpServer, including environment variable loading, transport configuration (e.g., STDIO, HTTP), and initial tool/resource registration. Remove or adapt any legacy Server class code.

## 2. Enhance Tool Registration with Comprehensive Metadata [pending]
### Dependencies: 14.1
### Description: Update tool registration to include detailed metadata for each tool, such as title, displayName, description, longDescription, input schema annotations, and relevant flags (e.g., dangerous, requiresConfirmation). Follow SDK conventions for tool annotations to improve LLM and UI integration.
### Details:
For each registered tool, provide clear and descriptive metadata fields. Annotate input schemas with field descriptions and validation details. Ensure destructive actions are flagged appropriately.

## 3. Declare and Advertise Explicit Server Capabilities [pending]
### Dependencies: 14.1
### Description: Explicitly declare supported server capabilities (e.g., supported transports, notification support, dynamic tool registration) using the McpServer API. Ensure these capabilities are advertised in the MCP handshake and capability discovery mechanisms.
### Details:
Configure the McpServer instance to expose all relevant capabilities. Update handshake and discovery logic to reflect the server's features and supported operations.

## 4. Implement Robust JSON-RPC Error Handling [pending]
### Dependencies: 14.1
### Description: Enhance error handling throughout the server to conform to standard JSON-RPC error patterns. Return structured error objects with code, message, and optional data fields. Map common Lodgify API errors and validation failures to appropriate JSON-RPC errors, ensuring all tool handlers propagate errors in the correct format.
### Details:
Refactor tool handlers and middleware to catch and format errors according to JSON-RPC standards. Implement error mapping for known Lodgify API and validation errors.

## 5. Implement Optional Features: Notification Debouncing and Dynamic Tool Management [pending]
### Dependencies: 14.1, 14.2, 14.3, 14.4
### Description: Add advanced features including notification debouncing (to coalesce or throttle repeated notifications) and dynamic tool management (enabling runtime registration/deregistration of tools if supported by the SDK).
### Details:
Integrate logic for debouncing notifications to reduce client noise. Implement APIs or mechanisms for dynamic tool registration and deregistration, allowing the server to adapt its capabilities at runtime.

## 6. Update and Expand Automated and Manual Tests [pending]
### Dependencies: 14.1, 14.2, 14.3, 14.4, 14.5
### Description: Review and update all automated and manual tests to cover the new McpServer implementation, enhanced tool metadata, capability declarations, error handling, and optional features. Ensure compatibility with existing tool handlers and the Lodgify HTTP client.
### Details:
Expand test coverage to include new server behaviors, metadata exposure, capability discovery, error scenarios, and dynamic tool management. Update documentation and comments to reflect new patterns and capabilities.

## 7. Implement File-Based Logging for STDIO Transport [pending]
### Dependencies: 14.1
### Description: Update logging practices to use a file-based logger (e.g., pino or winston) for STDIO transports, ensuring logs do not interfere with MCP protocol communication over stdout/stderr
### Details:
Replace console.log/error/warn calls with file-based logging to prevent interference with MCP stdio communication. Configure logger to write to a log file in the project directory or system temp folder. Ensure all debug, info, warning, and error messages are properly routed to the file logger.

## 8. Update Documentation and Code Comments [pending]
### Dependencies: 14.1, 14.2, 14.3, 14.4, 14.5
### Description: Update README.md, inline code comments, and JSDoc comments to reflect the new McpServer patterns, enhanced capabilities, and best practices
### Details:
Update README.md with new server architecture details, capability descriptions, and usage examples. Add comprehensive JSDoc comments to all public APIs and tool handlers. Update inline comments to explain McpServer-specific patterns and design decisions. Document any breaking changes or migration notes for users upgrading from the previous version.

## 9. Review Security and Environment Variable Management [pending]
### Dependencies: 14.1, 14.7
### Description: Audit and enhance security practices including environment variable management, API key handling, and authentication patterns according to MCP best practices
### Details:
Review current API key handling and ensure it follows security best practices. Implement proper environment variable validation and error messages. Consider adding support for multiple authentication methods if applicable. Ensure no sensitive data is logged or exposed in error messages. Review CORS and DNS rebinding protection if implementing HTTP transport support in the future.

