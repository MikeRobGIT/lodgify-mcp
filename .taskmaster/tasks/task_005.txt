# Task ID: 5
# Title: Implement Booking and Reservation Tools
# Status: done
# Dependencies: 3
# Priority: high
# Description: Create MCP tool implementations for booking operations including list, get, payment link management, and key code updates
# Details:
Add to lodgify.ts:
1. listBookings(params?: Record<string, any>):
   - GET /v2/reservations/bookings
   - Support date range, status filters
2. getBooking(id: string):
   - GET /v2/reservations/bookings/{id}
3. getBookingPaymentLink(id: string):
   - GET /v2/reservations/bookings/{id}/quote/paymentLink
4. createBookingPaymentLink(id: string, payload: object):
   - POST /v2/reservations/bookings/{id}/quote/paymentLink
   - JSON body with amount, currency, etc.
5. updateKeyCodes(id: string, payload: object):
   - PUT /v2/reservations/bookings/{id}/keyCodes
   - JSON body with key code data

Pseudo-code for POST/PUT methods:
```typescript
public async createBookingPaymentLink(id: string, payload: object) {
  if (!id) throw new Error('Booking ID is required');
  return this.request('POST', 
    `/v2/reservations/bookings/${encodeURIComponent(id)}/quote/paymentLink`,
    { body: payload }
  );
}

public async updateKeyCodes(id: string, payload: object) {
  if (!id) throw new Error('Booking ID is required');
  return this.request('PUT',
    `/v2/reservations/bookings/${encodeURIComponent(id)}/keyCodes`,
    { body: payload }
  );
}
```

# Test Strategy:
Test scenarios: 1) List bookings with date filters, 2) Get booking details, 3) Create payment link with valid payload, 4) Update key codes, 5) Handle missing required fields, 6) Verify POST/PUT body serialization

# Subtasks:
## 1. Implement listBookings and getBooking methods [done]
### Dependencies: None
### Description: Add listBookings method for GET /v2/reservations/bookings with date range and status filters support, and getBooking method for GET /v2/reservations/bookings/{id} to retrieve individual booking details
### Details:
In lodgify.ts, implement:
1. listBookings(params?: Record<string, any>): Handle optional query parameters for date ranges (dateFrom, dateTo) and status filters
2. getBooking(id: string): Validate booking ID is provided, encode ID in path, return booking details
Both methods use existing GET request pattern from property tools

## 2. Implement payment link management methods [done]
### Dependencies: 5.1
### Description: Create getBookingPaymentLink for retrieving payment links and createBookingPaymentLink for generating new payment links with POST request and JSON payload
### Details:
Add to lodgify.ts:
1. getBookingPaymentLink(id: string): GET /v2/reservations/bookings/{id}/quote/paymentLink
2. createBookingPaymentLink(id: string, payload: object): POST request with JSON body containing amount, currency, and other payment details
Extend request method to handle POST with body serialization using JSON.stringify

## 3. Implement updateKeyCodes method with PUT support [done]
### Dependencies: 5.2
### Description: Create updateKeyCodes method for updating booking key codes using PUT request with JSON payload validation
### Details:
Implement updateKeyCodes(id: string, payload: object):
- PUT /v2/reservations/bookings/{id}/keyCodes
- Validate booking ID exists
- Serialize payload to JSON for request body
- Extend request method to support PUT verb
- Handle response and errors consistently with other methods

## 4. Register booking tools in MCP server [done]
### Dependencies: 5.3
### Description: Add all five booking-related tools to server.ts with proper Zod schemas for input validation and map to corresponding client methods
### Details:
In server.ts, register:
1. lodgify.list_bookings with optional date/status params schema
2. lodgify.get_booking with required id schema
3. lodgify.get_booking_payment_link with required id schema
4. lodgify.create_booking_payment_link with id and payload validation
5. lodgify.update_key_codes with id and keyCodes payload schema
Define comprehensive Zod schemas for POST/PUT payloads

## 5. Create integration tests for booking tools [done]
### Dependencies: 5.4
### Description: Write comprehensive tests covering all booking operations including GET, POST, and PUT requests with various payload scenarios
### Details:
In tests/booking-tools.test.ts:
1. Test listBookings with date range filters
2. Test getBooking with valid/invalid IDs
3. Test payment link retrieval and creation with valid payloads
4. Test updateKeyCodes with key code data
5. Verify POST/PUT body serialization
6. Test error handling for missing required fields
7. Mock API responses for all endpoints

