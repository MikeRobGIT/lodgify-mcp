# Task ID: 2
# Title: Implement Lodgify HTTP Client Core
# Status: done
# Dependencies: 1
# Priority: high
# Description: Create the lodgify.ts HTTP client with authentication, base request handling, error formatting, and foundational retry logic for 429 responses
# Details:
Create src/lodgify.ts with:
1. LodgifyClient class constructor accepting apiKey
2. Private request method with:
   - Headers: 'X-ApiKey', 'Content-Type: application/json'
   - Base URL: 'https://api.lodgify.com'
   - Response parsing and error handling
3. Error structure: { error: true, message: string, status: number, path: string, detail?: any }
4. Initial 429 handling:
   - Check for Retry-After header
   - Exponential backoff: Math.min(Math.pow(2, attempt), 30) seconds
   - Max 5 retry attempts
5. Logging with console.log/error based on LOG_LEVEL env var

Example pseudo-code:
```typescript
class LodgifyClient {
  constructor(private apiKey: string) {}
  
  private async request(method: string, path: string, options?: RequestOptions) {
    let attempt = 0;
    while (attempt < 5) {
      const response = await fetch(`https://api.lodgify.com${path}`, {
        method,
        headers: { 'X-ApiKey': this.apiKey, ...options?.headers },
        body: options?.body ? JSON.stringify(options.body) : undefined
      });
      
      if (response.status === 429) {
        const retryAfter = response.headers.get('Retry-After');
        const delay = retryAfter ? parseInt(retryAfter) : Math.pow(2, attempt);
        await sleep(Math.min(delay * 1000, 30000));
        attempt++;
        continue;
      }
      
      if (!response.ok) throw this.formatError(response);
      return response.json();
    }
  }
}
```

# Test Strategy:
Unit tests for: 1) Request headers include X-ApiKey, 2) 429 retry logic with mocked responses, 3) Error formatting for various HTTP status codes, 4) Exponential backoff calculation, 5) Retry-After header parsing

# Subtasks:
## 1. Create LodgifyClient class structure [done]
### Dependencies: None
### Description: Set up the basic LodgifyClient class in src/lodgify.ts with constructor, private properties, and TypeScript interfaces for request options and error structures
### Details:
Create src/lodgify.ts file with: 1) LodgifyClient class definition, 2) Constructor accepting apiKey string parameter and storing it as private property, 3) TypeScript interfaces for RequestOptions (headers, body, params), 4) Error type definition matching the spec (error: true, message, status, path, detail?), 5) Private baseUrl constant set to 'https://api.lodgify.com', 6) Import statements for necessary Node.js/TypeScript utilities

## 2. Implement core request method with authentication [done]
### Dependencies: 2.1
### Description: Build the private request method that handles HTTP requests with proper authentication headers and base URL configuration
### Details:
Implement private async request method with: 1) Method signature accepting HTTP method, path, and optional RequestOptions, 2) Construct full URL using baseUrl + path, 3) Set required headers including 'X-ApiKey' with the stored apiKey and 'Content-Type: application/json', 4) Merge any additional headers from options, 5) Handle optional JSON body serialization when body is provided, 6) Use native fetch API for making the HTTP request, 7) Basic response handling to check response.ok status

## 3. Add comprehensive error handling and formatting [done]
### Dependencies: 2.2
### Description: Implement error detection, parsing, and formatting to provide consistent error structures across all API calls
### Details:
Enhance request method with: 1) Private formatError method that takes a Response object, 2) Extract error details from response body when available (try-catch for JSON parsing), 3) Create standardized error object with { error: true, message, status: response.status, path: request path, detail: parsed error body if available }, 4) Handle different HTTP error status codes with appropriate messages (400: Bad Request, 401: Unauthorized, 404: Not Found, 500: Server Error, etc.), 5) Throw formatted errors for non-ok responses, 6) Add proper error type annotations for TypeScript

## 4. Implement 429 retry logic with exponential backoff [done]
### Dependencies: 2.3
### Description: Add rate limiting handling with Retry-After header support and exponential backoff strategy for 429 responses
### Details:
Wrap request logic in retry loop: 1) Initialize attempt counter starting at 0, 2) While loop with max 5 attempts condition, 3) Check if response.status === 429 before error handling, 4) Extract Retry-After header value using response.headers.get('Retry-After'), 5) Calculate delay: use Retry-After if present (parse as integer seconds), otherwise use exponential backoff Math.pow(2, attempt), 6) Cap maximum delay at 30 seconds using Math.min, 7) Implement sleep utility function using setTimeout wrapped in Promise, 8) Increment attempt counter and continue loop on retry, 9) Return successful response.json() when not 429 and response.ok

## 5. Add configurable logging system [done]
### Dependencies: 2.4
### Description: Implement environment-based logging for debugging HTTP requests, retries, and errors using LOG_LEVEL environment variable
### Details:
Add logging throughout the client: 1) Create private log method that checks process.env.LOG_LEVEL (error, warn, info, debug), 2) Add debug logs for: outgoing request details (method, path, headers minus API key), retry attempts with delay time, response status codes, 3) Add info logs for: successful requests completion, retry attempt numbers, 4) Add error logs for: final failure after max retries, error response details (sanitized), 5) Use console.log for info/debug, console.warn for warnings, console.error for errors, 6) Conditionally enable verbose HTTP debugging when process.env.DEBUG_HTTP === '1' to log full request/response details

