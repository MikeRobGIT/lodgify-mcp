# Task ID: 17
# Title: Add Configurable Read-Only Mode to MCP Server
# Status: pending
# Dependencies: 7, 14
# Priority: medium
# Description: Implement a configurable read-only mode in the MCP server that restricts all write operations (POST, PUT, DELETE) and allows only read operations (GET), controlled via an environment variable.
# Details:
1. Introduce a new environment variable, e.g., LODGIFY_READ_ONLY, to control the server's access mode. Load this variable at server startup using dotenv or the existing configuration mechanism.

2. At the HTTP request handling layer (or within each tool handler if necessary), implement a middleware or guard that checks the read-only flag. If enabled, intercept all write operations (POST, PUT, DELETE) and immediately return a standardized error response (e.g., HTTP 403 Forbidden or MCP error code) with a clear message such as 'The server is in read-only mode.'

3. Ensure that all registered tools and endpoints that perform write/update/delete actions are covered by this check. For best maintainability, centralize the logic (e.g., a middleware or decorator) rather than duplicating checks in each handler.

4. Update tool metadata and documentation to indicate that write operations are disabled in read-only mode, if possible.

5. Follow best practices by making the error message user-friendly and including instructions or contact info if appropriate (see ArcGIS and Atlassian patterns[1][3]).

6. Ensure that the read-only mode is enforced regardless of the transport (HTTP, stdio, etc.) and that no bypass is possible except for explicitly whitelisted admin actions (if required, but avoid unless necessary for system health).

7. Document the new environment variable and its effect in the README and any relevant configuration files.

# Test Strategy:
1. Start the MCP server with LODGIFY_READ_ONLY=true and verify that all GET requests succeed as normal, while all POST, PUT, and DELETE requests return the expected error response and message.

2. Attempt to invoke each tool that performs a write operation and confirm that it is blocked in read-only mode, with a clear and consistent error message.

3. Start the server with LODGIFY_READ_ONLY unset or false and verify that all operations (read and write) function as before.

4. Add automated tests that simulate both modes and assert correct behavior for each tool and endpoint.

5. Review server logs to ensure that attempts to perform blocked operations are logged appropriately for audit purposes.

6. Validate that the documentation and tool metadata reflect the new behavior.
