name: Docker Build and Publish

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.IMAGE_NAME }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
      
      - name: Run container tests
        run: |
          # Start container in health check mode for testing
          docker run -d \
            --name test-container \
            -e LOG_LEVEL=debug \
            -p 3000:3000 \
            ${{ env.IMAGE_NAME }}:test \
            health-check
          
          # Wait for container to be healthy
          echo "Waiting for health check server to start..."
          for i in {1..30}; do
            if docker exec test-container curl -f http://localhost:3000/health 2>/dev/null; then
              echo "Health check server is responding!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          
          # Check container logs
          echo "Container logs:"
          docker logs test-container
          
          # Verify the health endpoint is working
          echo "Testing health endpoint:"
          docker exec test-container curl -f http://localhost:3000/health || exit 1
          
          # Clean up
          docker stop test-container
          docker rm test-container
      
      - name: Run Trivy vulnerability scanner
        if: success()
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:test
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          timeout: 10m
      
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Build and push multi-platform Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}
      
      - name: Normalize image name for SBOM
        if: github.event_name != 'pull_request'
        id: normalize
        run: |
          # Convert repository name to lowercase for registry compatibility
          NORMALIZED_IMAGE=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" | tr '[:upper:]' '[:lower:]')
          echo "image=$NORMALIZED_IMAGE" >> $GITHUB_OUTPUT
      
      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        continue-on-error: true
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.normalize.outputs.image }}
          format: spdx-json
          output-file: sbom.spdx.json
      
      - name: Upload SBOM
        if: github.event_name != 'pull_request' && hashFiles('sbom.spdx.json') != ''
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
      
      - name: Create release summary
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "## Docker Image Published! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pull Command" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY