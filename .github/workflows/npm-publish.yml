name: NPM Publish Safety Net

# This workflow publishes to npm if the version in package.json
# is not yet published. It serves as a safety net for when
# manual version bumps are committed but not tagged/released.
# Primary releases should use the release.yml workflow via git tags.

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'bin/**'
      - 'package.json'
      - 'tsconfig.json'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write
  pull-requests: write

jobs:
  check-version:
    name: Check if version needs publishing
    runs-on: ubuntu-latest
    outputs:
      should-publish: ${{ steps.check.outputs.should-publish }}
      version: ${{ steps.check.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
      
      - name: Check if version exists on npm
        id: check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version in package.json: $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if this version is already published on npm
          if npm view @mikerob/lodgify-mcp@$CURRENT_VERSION version 2>/dev/null; then
            echo "‚úÖ Version $CURRENT_VERSION is already published on npm"
            echo "should-publish=false" >> $GITHUB_OUTPUT
          else
            echo "üì¶ Version $CURRENT_VERSION is not on npm yet - will publish"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          fi
          
          # Check if there's a git tag for this version
          if git tag -l "v$CURRENT_VERSION" | grep -q .; then
            echo "‚ÑπÔ∏è  Git tag v$CURRENT_VERSION exists"
          else
            echo "‚ö†Ô∏è  No git tag found for v$CURRENT_VERSION"
            echo "   Consider creating a tag to trigger the primary release workflow"
          fi

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.should-publish == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Setup Node.js (for npm)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
      
      # No need to configure Git since we're not making commits
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Run tests
        run: bun test
        env:
          LODGIFY_API_KEY: test-api-key
          TEST_MODE: mock
      
      - name: Build
        run: bun run build
      
      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"
      
      - name: Publish to npm
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Setup Node.js for GitHub Packages
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com'
          scope: '@mikerobgit'

      - name: Publish to GitHub Packages
        run: |
          echo "Publishing to GitHub Packages..."
          # The package.json already has the correct scoped name @mikerob/lodgify-mcp
          # GitHub Packages requires the scope to match the owner (case-insensitive)
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create git tag (if missing)
        run: |
          VERSION=${{ steps.version.outputs.version }}
          if ! git tag -l "v$VERSION" | grep -q .; then
            echo "üéØ Creating git tag v$VERSION"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag -a "v$VERSION" -m "Release v$VERSION (automated)"
            git push origin "v$VERSION" || echo "‚ö†Ô∏è  Could not push tag"
          else
            echo "‚ÑπÔ∏è  Tag v$VERSION already exists"
          fi
      
      - name: Notify success
        if: success()
        run: |
          echo "‚úÖ Successfully published @mikerob/lodgify-mcp@${{ steps.version.outputs.version }}!"
          echo ""
          echo "üì¶ Published to:"
          echo "   ‚Ä¢ npm: https://www.npmjs.com/package/@mikerob/lodgify-mcp/v/${{ steps.version.outputs.version }}"
          echo "   ‚Ä¢ GitHub Packages: https://github.com/${{ github.repository }}/packages"
          echo ""
          echo "üí° Note: This workflow serves as a safety net."
          echo "   For primary releases, use git tags to trigger the release.yml workflow."